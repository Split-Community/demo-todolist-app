// Declaration file for JavaScript Browser Split Software SDK
// Project: http://www.split.io/

import '@splitsoftware/splitio-browserjs';
import type { SplitRumAgentConfig, SplitRumAgent } from '@splitsoftware/browser-rum-agent';
export {
  ConsentStatus,
  EventCollector,
  EventData,
  ILogger,
  IRouteChange,
  IRouteChangesOptions,
  Identity,
  Properties,
  SplitRumAgent,
  SplitRumAgentConfig,
  SplitRumAgentSettings,
  routeChanges,
  tti
} from '@splitsoftware/browser-rum-agent';

/**
 * Settings interface for Suite instances created on the browser.
 * @interface IBrowserSuiteSettings
 * @extends IBrowserSettings
 * @see {@link https://help.split.io/hc/en-us/articles/360058730852-Browser-SDK#configuration}
 */
export interface IBrowserSuiteSettings extends SplitIO.IBrowserSettings {
  core: SplitIO.IBrowserBasicSettings['core'] & {
    /**
     * Traffic type of the identity provided to the RUM Agent for event tracking. @see {@link https://help.split.io/hc/en-us/articles/360019916311-Traffic-type}
     * If no provided, 'user' is used as default.
     * This does not affect the behavior of the SDK client: even if provided, you still need to specify the traffic type in `client.track()` calls.
     *
     * @property {string=} trafficType
     */
    trafficType?: string,
  },
  /**
   * Optional configuration object for the RUM agent.
   * @see {@link https://help.split.io/hc/en-us/articles/360030898431-Browser-RUM-agent#configuration}
   */
  rumAgent?: SplitRumAgentConfig
}

/**
 * This represents the interface for the Suite instance, that is an extension of the ISDK interface.
 * @interface ISuiteSDK
 * @extends ISDK
 */
export interface ISuiteSDK extends SplitIO.ISDK {
  /**
   * Returns the default client instance of the SDK and adds its identity (i.e., user key and traffic type pair) to the RUM agent for event tracking.
   *
   * NOTE: if no traffic type is provided in the SDK config, 'user' will be used as default for the RUM Agent.
   *
   * @function client
   * @returns {IClient} The client instance.
   */
  client(): SplitIO.IClient,
  /**
   * Returns a shared client of the SDK and adds its identity (i.e., user key and traffic type pair) to the RUM agent for event tracking.
   *
   * NOTE: if no traffic type is provided as second argument, 'user' will be used as default for the RUM Agent.
   *
   * @function client
   * @param {SplitKey} key The key for the new client instance.
   * @param {string=} trafficType The traffic type of the provided key, used to pass an identity to the RUM agent. If not provided, 'user' will be used as default.
   * @returns {IClient} The client instance.
   */
  client(key: SplitIO.SplitKey, trafficType?: string): SplitIO.IClient,
  /**
   * Returns the Browser RUM Agent.
   *
   * @function rumAgent
   * @returns {typeof SplitRumAgent} The RUM Agent instance.
   */
  rumAgent(): typeof SplitRumAgent
  /**
   * Destroys all client instances and remove identities from the RUM agent to stop tracking events for them.
   * This method will flush any pending impressions and events, and stop the synchronization of feature flag definitions with the backend.
   *
   * @function destroy
   * @returns {Promise<void>} A promise that resolves once the client is destroyed.
   */
  destroy(): Promise<void>
}

/**
 * Split.io Suite factory function.
 *
 * The settings parameter should be an object that complies with the SplitIO.IBrowserSuiteSettings.
 * For more information read the corresponding article: @see {@link https://help.split.io/hc/en-us/articles/360030898431-Browser-RUM-agent#sdk-integration}
 */
export function SplitSuite(settings: IBrowserSuiteSettings): ISuiteSDK;

/**
 * Persistent storage based on the LocalStorage Web API for browsers.
 *
 * @see {@link https://help.split.io/hc/en-us/articles/360058730852-Browser-SDK#storage}
 */
export function InLocalStorage(options?: SplitIO.InLocalStorageOptions): SplitIO.StorageSyncFactory;

/**
 * Creates a logger instance that enables descriptive log messages with DEBUG log level when passed in the factory settings.
 *
 * @see {@link https://help.split.io/hc/en-us/articles/360058730852-Browser-SDK#logging}
 */
export function DebugLogger(): SplitIO.ILogger;

/**
 * Creates a logger instance that enables descriptive log messages with INFO log level when passed in the factory settings.
 *
 * @see {@link https://help.split.io/hc/en-us/articles/360058730852-Browser-SDK#logging}
 */
export function InfoLogger(): SplitIO.ILogger;

/**
 * Creates a logger instance that enables descriptive log messages with WARN log level when passed in the factory settings.
 *
 * @see {@link https://help.split.io/hc/en-us/articles/360058730852-Browser-SDK#logging}
 */
export function WarnLogger(): SplitIO.ILogger;

/**
 * Creates a logger instance that enables descriptive log messages with ERROR log level when passed in the factory settings.
 *
 * @see {@link https://help.split.io/hc/en-us/articles/360058730852-Browser-SDK#logging}
 */
export function ErrorLogger(): SplitIO.ILogger;
