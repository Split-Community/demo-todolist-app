/**
 * A small ponyfill of Object.assign
 */
export var objectAssign = Object.assign || function (target) {
    if (target === null || target === undefined)
        throw new TypeError('Object.assign cannot be called with null or undefined');
    target = Object(target);
    for (var i = 1; i < arguments.length; i++) {
        var source = Object(arguments[i]); // eslint-disable-next-line no-restricted-syntax
        for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
            }
        }
    }
    return target;
};
export function assignIdentities(event, identities, queue) {
    if (event.eventTypeId && event.timestamp) {
        if (!identities.length || (event.key && event.trafficTypeName)) {
            queue.push(event);
        }
        else {
            identities.forEach(function (identity) {
                queue.push(objectAssign({
                    trafficTypeName: identity.trafficType,
                    key: identity.key
                }, event));
            });
        }
    }
}
