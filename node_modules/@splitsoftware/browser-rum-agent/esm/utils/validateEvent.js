import { isBoolean } from './isBoolean';
import { isNumber } from './isNumber';
import { isObject } from './isObject';
import { isString } from './isString';
import { objectAssign } from './assign';
/**
 * Validates and sanitizes a properties object. Returns the sanitized object or undefined if it is invalid (i.e., not a plain object).
 */
export function validateProperties(properties, log) {
    if (!isObject(properties)) {
        log.error('Event `properties` must be a plain object.');
        return;
    }
    // Validate and sanitize property values
    var propertiesClone = objectAssign({}, properties);
    Object.keys(propertiesClone).forEach(function (key) {
        var val = propertiesClone[key]; // eslint-disable-next-line eqeqeq
        if (val == undefined || isString(val) || isNumber(val) || isBoolean(val))
            return;
        log.warn("Property " + key + " is of invalid type. Setting value to null.");
        propertiesClone[key] = null;
    });
    return propertiesClone;
}
var EVENT_TYPE_REGEX = /^[a-zA-Z0-9][-_.:a-zA-Z0-9]{0,79}$/;
/**
 * Validates and sanitizes an event. Returns the sanitized event or undefined if the event is invalid.
 */
export function validateEvent(event, log) {
    var eventTypeId = event.eventTypeId, value = event.value, properties = event.properties;
    if (!isString(eventTypeId) || !EVENT_TYPE_REGEX.test(eventTypeId)) {
        log.error('Event must have a valid eventTypeId.');
        return;
    }
    // eslint-disable-next-line eqeqeq
    if (value != undefined && !isNumber(value)) {
        log.error('Event value must be a number.');
        return;
    }
    // eslint-disable-next-line eqeqeq
    if (properties != undefined && !(properties = validateProperties(properties, log))) {
        return;
    }
    return { eventTypeId: eventTypeId, value: value, properties: properties };
}
