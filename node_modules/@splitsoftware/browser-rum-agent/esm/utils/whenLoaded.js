/**
 * Calls the callback function when the document is loaded or if it is already loaded.
 */
export function whenLoaded(callback) {
    if (document.readyState === 'complete') {
        // Queue a task so the callback runs after `loadEventEnd`.
        setTimeout(callback, 0);
    }
    else {
        window.addEventListener('load', function () {
            // Defer, because we should wait until the handlers finish to allow customer logic run first.
            setTimeout(callback, 0);
        });
    }
}
export function onPageHideOrVisibilityChange(callback) {
    // `unload` is not reliable, so we use `pagehide` if available: https://developer.chrome.com/articles/page-lifecycle-api/#the-unload-event
    var PAGE_TERMINATION_EVENT = typeof window.onpagehide !== 'undefined' ? 'pagehide' : 'unload';
    // Flush data whenever the page is hidden or unloaded
    if (typeof document !== 'undefined' && document.addEventListener) {
        document.addEventListener('visibilitychange', function onVisibilityChange() {
            if (document.visibilityState === 'hidden')
                callback();
        });
    }
    // Some browsers, like Safari, does not fire the `visibilitychange` event when the page is being unloaded.
    // Therefore, we also flush data in the `pagehide` event (or `unload` if `pagehide` is not available).
    // If both events are triggered, the latter will find the events queue empty, so no duplicate data will be submitted.
    window.addEventListener(PAGE_TERMINATION_EVENT, callback);
}
