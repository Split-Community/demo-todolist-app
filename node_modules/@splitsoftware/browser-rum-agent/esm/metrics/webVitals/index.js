// webVitals plugin uses the web-vital standard build.
import * as WebVitals from 'web-vitals';
import { isObject } from '../../utils/isObject';
export function convertWebVitalsMetricToSplitEvent(_a) {
    var name = _a.name, value = _a.value, rating = _a.rating, navigationType = _a.navigationType;
    return {
        eventTypeId: "webvitals." + name.toLowerCase(),
        value: value,
        properties: {
            rating: rating,
            navigationType: navigationType
        }
    };
}
/**
 * web-vitals metrics
 */
export function webVitals(options) {
    if (options === void 0) { options = {}; }
    var _a = options.reportOptions, reportOptions = _a === void 0 ? {
        onCLS: true,
        onFCP: true,
        onFID: true,
        onINP: true,
        onLCP: true,
        onTTFB: true,
    } : _a;
    return function onWebVitals(ctx) {
        Object.keys(reportOptions).forEach(function (key) {
            if (reportOptions[key] && WebVitals[key]) {
                WebVitals[key](function (metric) {
                    ctx.track(convertWebVitalsMetricToSplitEvent(metric));
                }, isObject(reportOptions[key]) ? reportOptions[key] : undefined);
            }
        });
    };
}
