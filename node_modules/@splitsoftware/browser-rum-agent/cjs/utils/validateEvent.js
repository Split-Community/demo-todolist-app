"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateEvent = exports.validateProperties = void 0;
var isBoolean_1 = require("./isBoolean");
var isNumber_1 = require("./isNumber");
var isObject_1 = require("./isObject");
var isString_1 = require("./isString");
var assign_1 = require("./assign");
/**
 * Validates and sanitizes a properties object. Returns the sanitized object or undefined if it is invalid (i.e., not a plain object).
 */
function validateProperties(properties, log) {
    if (!(0, isObject_1.isObject)(properties)) {
        log.error('Event `properties` must be a plain object.');
        return;
    }
    // Validate and sanitize property values
    var propertiesClone = (0, assign_1.objectAssign)({}, properties);
    Object.keys(propertiesClone).forEach(function (key) {
        var val = propertiesClone[key]; // eslint-disable-next-line eqeqeq
        if (val == undefined || (0, isString_1.isString)(val) || (0, isNumber_1.isNumber)(val) || (0, isBoolean_1.isBoolean)(val))
            return;
        log.warn("Property " + key + " is of invalid type. Setting value to null.");
        propertiesClone[key] = null;
    });
    return propertiesClone;
}
exports.validateProperties = validateProperties;
var EVENT_TYPE_REGEX = /^[a-zA-Z0-9][-_.:a-zA-Z0-9]{0,79}$/;
/**
 * Validates and sanitizes an event. Returns the sanitized event or undefined if the event is invalid.
 */
function validateEvent(event, log) {
    var eventTypeId = event.eventTypeId, value = event.value, properties = event.properties;
    if (!(0, isString_1.isString)(eventTypeId) || !EVENT_TYPE_REGEX.test(eventTypeId)) {
        log.error('Event must have a valid eventTypeId.');
        return;
    }
    // eslint-disable-next-line eqeqeq
    if (value != undefined && !(0, isNumber_1.isNumber)(value)) {
        log.error('Event value must be a number.');
        return;
    }
    // eslint-disable-next-line eqeqeq
    if (properties != undefined && !(properties = validateProperties(properties, log))) {
        return;
    }
    return { eventTypeId: eventTypeId, value: value, properties: properties };
}
exports.validateEvent = validateEvent;
