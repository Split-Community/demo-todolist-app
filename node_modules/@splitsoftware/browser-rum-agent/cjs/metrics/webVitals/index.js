"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.webVitals = exports.convertWebVitalsMetricToSplitEvent = void 0;
// webVitals plugin uses the web-vital standard build.
var WebVitals = __importStar(require("web-vitals"));
var isObject_1 = require("../../utils/isObject");
function convertWebVitalsMetricToSplitEvent(_a) {
    var name = _a.name, value = _a.value, rating = _a.rating, navigationType = _a.navigationType;
    return {
        eventTypeId: "webvitals." + name.toLowerCase(),
        value: value,
        properties: {
            rating: rating,
            navigationType: navigationType
        }
    };
}
exports.convertWebVitalsMetricToSplitEvent = convertWebVitalsMetricToSplitEvent;
/**
 * web-vitals metrics
 */
function webVitals(options) {
    if (options === void 0) { options = {}; }
    var _a = options.reportOptions, reportOptions = _a === void 0 ? {
        onCLS: true,
        onFCP: true,
        onFID: true,
        onINP: true,
        onLCP: true,
        onTTFB: true,
    } : _a;
    return function onWebVitals(ctx) {
        Object.keys(reportOptions).forEach(function (key) {
            if (reportOptions[key] && WebVitals[key]) {
                WebVitals[key](function (metric) {
                    ctx.track(convertWebVitalsMetricToSplitEvent(metric));
                }, (0, isObject_1.isObject)(reportOptions[key]) ? reportOptions[key] : undefined);
            }
        });
    };
}
exports.webVitals = webVitals;
